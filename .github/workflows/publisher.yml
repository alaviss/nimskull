name: Publish built artifacts
on:
  push:
    branches:
      - devel

  workflow_call:
    inputs:
      run-id:
        required: true
        type: string

      commit:
        required: true
        type: string

# Run every script actions in bash
defaults:
  run:
    shell: bash

# Since we will be pushing, make sure that only one instance can run at a time.
concurrency: publisher

jobs:
  publisher:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: write

    environment:
      name: release
      url: ${{ steps.release.outputs.url }}

    env:
      COMMIT: ${{ inputs.commit || github.event.after }}

    steps:
      # Publish action needs a checkout
      - uses: actions/checkout@v4

      - name: Obtain latest successful run id
        id: finder
        run: |
          get_id() {
            if [[ -n $INPUTS_RUNID ]]; then
              echo "$INPUTS_RUNID"
            else
              gh run list \
                -c "$COMMIT" \
                -w "$WORKFLOW" \
                -s "$CONCLUSION" \
                --limit 1 \
                --json databaseId \
                --jq '.[].databaseId'
            fi
          }

          run_id=$(get_id)
          if [[ -z $run_id ]]; then
            echo "::error::Could not found any CI run for commit $COMMIT"
            exit 1
          fi
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"
        env:
          INPUTS_RUNID: ${{ inputs.run-id }}
          WORKFLOW: ci.yml
          CONCLUSION: success
          GH_TOKEN: ${{ github.token }}

      # Download the latest instance of artifacts from a build done previously
      - name: Download generated source archive
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.finder.outputs.run_id }}
          # Keep up-to-date with ci.yml
          name: source archive
          path: release-staging
          github-token: ${{ github.token }}

      - name: Download generated release binaries
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.finder.outputs.run_id }}
          # Keep up-to-date with ci.yml
          pattern: release binaries *
          merge-multiple: "true"
          path: release-staging
          github-token: ${{ github.token }}

      - name: Download release manifest tool
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.finder.outputs.run_id }}
          # Keep up-to-date with ci.yml
          name: release manifest tool
          path: release-staging
          github-token: ${{ github.token }}

      - id: release-files
        name: Create release manifest
        run: |
          # Github Artifacts strip executable permissions so it has to be set again
          chmod 755 release_manifest
          # Create a new release manifest
          ./release_manifest add *.json

          toUpload=$(./release_manifest files-to-upload)
          delimiter=EOF-$(uuidgen)
          cat <<EOF >> $GITHUB_OUTPUT
          result<<$delimiter
          $toUpload
          $delimiter
          EOF
          echo "version=$(./release_manifest version)" >> $GITHUB_OUTPUT
          echo "doc-artifact=$(./release_manifest get "$DOC_TARGET")" >> $GITHUB_OUTPUT
        env:
          DOC_TARGET: x86_64-linux-gnu
        working-directory: release-staging

      - id: docs
        name: Extract docs from artifact
        run: |
          mkdir -p "$RUNNER_TEMP/docs"
          cd "$RUNNER_TEMP/docs"
          tar -xf "$DOC_ARTIFACT" nim-$VERSION/doc/html --strip-components=3
          echo "folder=$PWD" >> $GITHUB_OUTPUT
        env:
          DOC_ARTIFACT: ${{ steps.release-files.outputs.doc-artifact }}
          VERSION: ${{ steps.release-files.outputs.version }}

      - name: Upload docs as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.docs.outputs.folder }}

      - id: release
        name: Create release
        uses: softprops/action-gh-release@v2.0.5
        with:
          prerelease: ${{ contains(steps.release-files.outputs.version, '-') }}
          files: ${{ steps.release-files.outputs.result }}
          tag_name: ${{ steps.release-files.outputs.version }}
          fail_on_unmatched_files: true
          target_commitish: ${{ env.COMMIT }}
          body: |
            Continuous delivery for commit ${{ env.COMMIT }}

  docs-deploy:
    needs: [publisher]
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - id: deploy
        name: Deploy docs
        uses: actions/deploy-pages@v4

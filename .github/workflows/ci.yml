name: Build and test
on:
  push:
    # Empty configuration means use default (ie. test all branches)
    branches-ignore:
      - staging.tmp
      - trying.tmp
      - staging-squash-merge.tmp

  pull_request:
    # Only take PRs to devel
    branches:
      - devel

    # Type of events to run CI on
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

# Run every script actions in bash
defaults:
  run:
    shell: bash

jobs:
  pre_run:
    name: Provide additional context for the workflow
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.skip_result.outputs.result }}
      target_matrix: ${{ steps.matrix.outputs.result }}

    steps:
      - id: run_cond
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          # Cancel CI on outdated commits
          cancel_others: true
          # Don't skip when a duplicated run (ie. from a PR) is done.
          #
          # Only CI in upstream has docs publishing rights.
          skip_after_successful_duplicate: false
          # Do not skip on push, dispatched or cron
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

      - id: skip_result
        name: Whether to skip checks
        run: |
          if [[ '${{ steps.run_cond.outputs.should_skip }}' == true ]]; then
            echo "::set-output name=result::true"
          elif [[ '${{ github.event.pull_request.draft }}' == true ]]; then
            echo "Pull request is in draft state, skipping"
            echo "::set-output name=result::true"
          else
            echo "::set-output name=result::false"
          fi

      - id: matrix
        name: Obtain build target matrix
        run: |
          # This matrix will be shared by the jobs following it.
          #
          # The schema is:
          # [
          #   {
          #     name: String,  ## The name of the target being tested
          #     runner: String ## The runner to use of this target
          #     publish_docs?: Bool ## Whether to publish documentation created by this target
          #     builder_img?: String ## The container image used to run compiler builds
          #     tester_img?: Sring ## The container image used to test compiler
          #   }
          # ]
          cat << "EOF" > matrix.json
          [
            {
              "name": "Linux",
              "runner": "ubuntu-latest",
              "publish_docs": true,
              "builder_img": "ghcr.io/alaviss/nimskull-builder:0.1.1",
              "tester_img": "ghcr.io/alaviss/nimskull-tester:0.1.1"
            },
            {
              "name": "macOS",
              "runner": "macos-10.15"
            }
          ]
          EOF

          # Use jq to compact the matrix into one line to be used as the result
          echo "::set-output name=result::$(jq -c . matrix.json)"

  binrelease:
    needs: [pre_run]
    if: needs.pre_run.outputs.skip != 'true'

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Build binary release for ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.runner }}
    container: ${{ matrix.target.builder_img }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - id: build
        name: Build binary release
        run: |
          ./koch.py unixrelease

          # This is the part where we... guess what the generated archive was
          # so it could be uploaded.
          #
          # It is not ideal, but there aren't any better ideas at the time of
          # writing.

          # Make sure that the list come up empty if nothing is found
          shopt -s nullglob
          # Use a glob to capture the archive name
          archive=( build/*.tar* )

          # The binary release command should build exactly one archive
          if [[ ${#archive[@]} -gt 1 ]]; then
            echo "Error: more than one file matched the archive glob"
            echo "Info: resulting file list: ${archive[@]}"
            exit 1
          elif [[ ${#archive[@]} -lt 1 ]]; then
            echo "Error: no file matched the archive glob"
            exit 1
          fi

          # Set the archive as the output of this step
          echo "::set-output name=result::${archive[0]}"

      - name: Upload binary release to artifacts
        uses: actions/upload-artifact@v2.3.1
        with:
          name: binary ${{ matrix.target.name }}
          path: ${{ steps.build.outputs.result }}
          if-no-files-found: error

      - name: Upload workspace to artifacts
        uses: ./.github/actions/upload-compiler

  test:
    needs: [pre_run, binrelease]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}
        # This controls the testament "batch" feature.
        #
        # If any additional batches are added, increment `total_batch` as well.
        #
        # This feature allow us to parallelize testing.
        batch: [0, 1]
        # This tells testament how many batches are used. Have to be placed in
        # an array due to how Github Actions process matrices.
        total_batch: [2]

    name: 'Test the compiler and stdlib (${{ matrix.target.name }}, batch #${{ matrix.batch }})'
    runs-on: ${{ matrix.target.runner }}
    container: ${{ matrix.target.tester_img }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Install NodeJS (macOS)
        if: runner.os == 'macOS'
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '16'

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          deps=(
            # Needed by boehm gc tests
            bdw-gc

            # Required by Nim in Action tests
            sdl
            sfml
          )

          brew update
          brew install "${deps[@]}"

      - name: Run tester
        run: ./koch.py test --batch:'${{ matrix.batch }}_${{ matrix.total_batch }}' all

      - name: Print all test errors
        if: failure()
        run: bin/nim r tools/ci_testresults

  orc:
    needs: [pre_run, binrelease]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Test build compiler with ORC (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    container: ${{ matrix.target.builder_img }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Test ORC bootstrap
        run: ./koch.py --nim:bin/nim boot -d:release --gc:orc

  tooling:
    needs: [pre_run, binrelease]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Test tooling (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    container: ${{ matrix.target.builder_img }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Test tooling
        run: ./koch.py testTools

  doc:
    needs: [pre_run, binrelease]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Build HTML documentation (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}
    container: ${{ matrix.target.builder_img }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build docs
        run: |
          branch=${{ github.ref }}
          # Remove refs/heads/ prefix
          branch=${branch##*/}

          ./koch.py doc \
            --git.url:'https://github.com/${{ github.repository }}' \
            --git.commit:'${{ github.sha }}' \
            --git.devel:"$branch"

      - name: Publish
        if: |
          github.event_name == 'push' && github.ref == 'refs/heads/devel' &&
          matrix.target.publish_docs
        uses: crazy-max/ghaction-github-pages@v2.6.0
        with:
          build_dir: doc/html
        env:
          GITHUB_TOKEN: ${{ github.token }}

  passed:
    name: All check passed
    needs: [binrelease, test, tooling, doc, orc]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Raise failure
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "::error::There are failing required jobs"
          exit 1

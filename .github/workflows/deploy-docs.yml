name: Deploy documentation
on:
  # Automatically run after any completed publish
  workflow_run:
    workflows:
      - Publish built artifacts
      - Build and publish release
    types:
      - completed

  # For manual triggers
  workflow_dispatch:

# Run every script actions in bash
defaults:
  run:
    shell: bash

concurrency: doc-publisher

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      pages: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    env:
      # Triplet to obtain docs from
      DOC_TARGET: x86_64-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Setup latest compiler
        uses: nim-works/setup-nimskull@0.1.2
        with:
          nimskull-version: "*" # Grab the latest nimskull-version

      - name: Compile release_manifest
        run: nim c -d:release -o:release_manifest tools/release_manifest.nim

      - id: versions
        name: Grab latest release versions
        run: |
          # Stolen from asdf-nimskull
          sort_versions() {
            sed 'h; s/[+-]/./g; s/$/.z/; G; s/\n/ /' |
              LC_ALL=C sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4 -k 5,5n | awk '{print $2}'
          }

          all_tags=$(gh release list --json tagName --jq '.[] | .tagName')
          sorted=$(sort_versions <<<"$all_tags")
          latest=$(tail -n 1 <<<"$sorted")
          stable=$(grep -v - <<<"$sorted" || true)

          if [[ -n "$stable" ]]; then
            echo "Stable versions:"
            echo "$stable"
          fi
          echo "Latest devel is: $latest"

          delim=EOF-$(uuidgen -r)
          if [[ -n "$stable" ]]; then
            {
              echo "stable<<$delim"
              echo "$stable"
              echo "$delim"
            } >> "$GITHUB_OUTPUT"
            echo "stable-hash=$(sha256sum - <<<"$stable" | cut -f1 -d' ')" >> "$GITHUB_OUTPUT"
          fi
          echo "devel=$latest" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - if: steps.versions.outputs.stable
        id: stable-docs-cache
        name: Cache stable docs
        uses: actions/cache@v4
        with:
          path: stable-docs
          key: stable-docs-${{ steps.versions.outputs.stable-hash }}
          restore-keys: stable-docs-

      - if: steps.versions.outputs.stable && steps.stable-docs-cache.outputs.cache-hit != 'true'
        name: Construct stable docs
        run: |
          mkdir -p stable-docs
          for version in $STABLE_VERSIONS; do
            echo "Constructing docs for version $version"
            if [[ -d "$version" ]]; then
              echo "Docs for $version already exists, skipping..."
            else
              tmpdir=$(mktemp -dp "$RUNNER_TEMP" "$version.XXXXXXXXXX")
              # Get the name of the binary archive for the documentation target
              release_archive=$(gh release download "$version" -p manifest.json -O - | ./release_manifest -f /dev/stdin get "$DOC_TARGET")
              # Download the release binary
              gh release download "$DEVEL" -p "$release_archive" -O "$tmpdir/$release_archive"
              # Extract and remove the top-level directory
              tar -C "$tmpdir" -xf "$tmpdir/$release_archive" --strip-components=1

              cp -rT "$tmpdir/doc/html" "stable-docs/$version"
            fi
          done
          echo "$STABLE_VERSIONS" >> stable-docs/versions.txt
        env:
          STABLE_VERSIONS: ${{ steps.versions.outputs.stable }}
          GH_TOKEN: ${{ github.token }}

      - name: Construct devel docs
        run: |
          tmpdir=$(mktemp -dp "$RUNNER_TEMP" devel.XXXXXXXXXX)
          # Get the name of the binary archive for the documentation target
          release_archive=$(gh release download "$DEVEL" -p manifest.json -O - | ./release_manifest -f /dev/stdin get "$DOC_TARGET")
          # Download the latest release binary
          gh release download "$DEVEL" -p "$release_archive" -O "$tmpdir/$release_archive"
          # Extract and remove the top-level directory
          tar -C "$tmpdir" -xf "$tmpdir/$release_archive" --strip-components=1

          if [[ -d stable-docs ]]; then
            cp -rT stable-docs built-docs
          else
            mkdir -p built-docs
          fi
          cp -rT "$tmpdir/doc/html" built-docs/devel
          cp -rT "$tmpdir/doc/html" built-docs
          echo "devel" >> built-docs/versions.txt
        env:
          GH_TOKEN: ${{ github.token }}
          DEVEL: ${{ steps.versions.outputs.devel }}

      - uses: actions/upload-pages-artifact@v3
        with:
          path: built-docs/

      - id: deploy
        uses: actions/deploy-pages@v4
